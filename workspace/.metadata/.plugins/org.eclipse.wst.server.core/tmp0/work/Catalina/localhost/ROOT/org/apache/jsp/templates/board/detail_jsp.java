/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-04-22 12:18:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.templates.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1681825652000L));
    _jspx_dependants.put("jar:file:/Users/gimjin/Desktop/web_1900_hds/jsp/workspace/app/app/WebContent/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>상세보기</title>\r\n");
      out.write("    <link rel=\"shortcut icon\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/favicon.png\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/css/board/board.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <main id=\"board\">\r\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../fix/header.jsp", out, false);
      out.write("\r\n");
      out.write("        <section id=\"board-banner\">\r\n");
      out.write("            <div><a href=\"javascript:void(0)\"><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/board_banner.png\"></a></div>\r\n");
      out.write("        </section>\r\n");
      out.write("        <section id=\"info-wrap\">\r\n");
      out.write("            <article id=\"info-container\">\r\n");
      out.write("                <h6 class=\"info\">게시글 상세보기</h6>\r\n");
      out.write("                <section class=\"move-page\">\r\n");
      out.write("                    <a href=\"javascript:location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/board/listOk.board'\">목록으로</a>\r\n");
      out.write("                    ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("                </section>\r\n");
      out.write("            </article>\r\n");
      out.write("            <section id=\"detail-title\">\r\n");
      out.write("                <h2>REST가 뭐에요?</h2>\r\n");
      out.write("            </section>\r\n");
      out.write("            <section id=\"detail-info\">\r\n");
      out.write("                <div class=\"profile\">\r\n");
      out.write("                    <div><img src=\"/static/images/profile.png\" width=\"15px\"></div>\r\n");
      out.write("                    <h6 class=\"writer\">한동석</h6>\r\n");
      out.write("                </div>\r\n");
      out.write("                <hr>\r\n");
      out.write("                <h6 id=\"detail-read-count\">조회 75</h6>\r\n");
      out.write("                <hr>\r\n");
      out.write("            </section>\r\n");
      out.write("            <section id=\"reply-write-wrap\">\r\n");
      out.write("                <div class=\"profile\">\r\n");
      out.write("                    <div><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/profile.png\" width=\"15px\"></div>\r\n");
      out.write("                    <h6 class=\"writer\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.memberName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h6>\r\n");
      out.write("                </div>\r\n");
      out.write("                <textarea cols=\"30\" rows=\"1\" placeholder=\"내 댓글\" name=\"replyContent\"></textarea>\r\n");
      out.write("                <button id=\"write-ok\">작성완료</button>\r\n");
      out.write("            </section>\r\n");
      out.write("            <h5 id=\"content\">\r\n");
      out.write("               	어노테이션 보니까 @RestController가 있던데 @Controller와 다른건가요?<br>\r\n");
      out.write("                @Controller에서 @ResponseBody 붙여서 사용하는 게 @RestController랑 같다고 하는데,<br>\r\n");
      out.write("                @RestController 사용할 때랑 @Controller에서 @ResponseBody 사용할 때의 차이좀 알려주세요.. 그리고 REST가 뭔지 몰라서 제가 이해를 못하는 것 같은데\r\n");
      out.write("                REST도 알려주세요 ㅠㅠ\r\n");
      out.write("            </h5>\r\n");
      out.write("            <div>\r\n");
      out.write("                <img src=\"/static/images/preview.png\" width=\"100%\" class=\"file-list\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <section id=\"reply-write-wrap\" style=\"display: block;\">\r\n");
      out.write("                <div class=\"profile\">\r\n");
      out.write("                    <div><img src=\"/static/images/profile.png\" width=\"15px\"></div>\r\n");
      out.write("                    <h6 class=\"writer\">한동석</h6>\r\n");
      out.write("                </div>\r\n");
      out.write("                <textarea id=\"\" cols=\"30\" rows=\"1\" placeholder=\"내 댓글\"></textarea>\r\n");
      out.write("                <button>작성완료</button>\r\n");
      out.write("            </section>\r\n");
      out.write("            <section id=\"replies-wrap\">\r\n");
      out.write("                <ul>\r\n");
      out.write("                <li>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <section class=\"content-container\">\r\n");
      out.write("                                <div class=\"profile\">\r\n");
      out.write("                                    <div><img src=\"/static/images/reply_profile.png\" width=\"15px\"></div>\r\n");
      out.write("                                    <h6 class=\"writer\">홍길동</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <h4 class=\"title\">\r\n");
      out.write("                                    위키백과 가져옴~<br><br>\r\n");
      out.write("                                    REST(Representational State Transfer)는 월드 와이드 웹과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 아키텍처의 한\r\n");
      out.write("                                    형식이다. 이 용어는 로이 필딩(Roy Fielding)의 2000년 박사학위 논문에서 소개되었다. 필딩은 HTTP의 주요 저자 중 한 사람이다. 이\r\n");
      out.write("                                    개념은 네트워킹 문화에 널리 퍼졌다.<br>\r\n");
      out.write("                                    엄격한 의미로 REST는 네트워크 아키텍처 원리의 모음이다. 여기서 '네트워크 아키텍처 원리'란 자원을 정의하고 자원에 대한 주소를 지정하는 방법\r\n");
      out.write("                                    전반을 일컫는다. 간단한 의미로는, 웹 상의 자료를 HTTP위에서 SOAP이나 쿠키를 통한 세션 트랙킹 같은 별도의 전송 계층 없이 전송하기 위한 아주\r\n");
      out.write("                                    간단한 인터페이스를 말한다.<br>\r\n");
      out.write("                                    이 두 가지의 의미는 겹치는 부분과 충돌되는 부분이 있다. 필딩의 REST 아키텍처 형식을 따르면 HTTP나 WWW가 아닌 아주 커다란 소프트웨어\r\n");
      out.write("                                    시스템을 설계하는 것도 가능하다. 또한, 리모트 프로시저 콜 대신에 간단한 XML과 HTTP 인터페이스를 이용해 설계하는 것도 가능하다.<br>\r\n");
      out.write("                                    필딩의 REST 원리를 따르는 시스템은 종종 RESTful이란 용어로 지칭된다. 열정적인 REST 옹호자들은 스스로를 RESTafrians 이라고\r\n");
      out.write("                                    부른다.\r\n");
      out.write("                                </h4>\r\n");
      out.write("                                <h6 clss=\"board-info\">\r\n");
      out.write("                                    <span class=\"date\">방금 전</span>\r\n");
      out.write("                                </h6>\r\n");
      out.write("                            </section>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <section class=\"content-container\">\r\n");
      out.write("                                <div class=\"profile\">\r\n");
      out.write("                                    <div><img src=\"/static/images/reply_profile.png\" width=\"15px\"></div>\r\n");
      out.write("                                    <h6 class=\"writer\">홍길동</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <h4 class=\"title\">@RestController 때려놓으면 ViewResolver 사용 못함</h4>\r\n");
      out.write("                                <h6 clss=\"board-info\">\r\n");
      out.write("                                    <span class=\"date\">1일 전</span>\r\n");
      out.write("                                </h6>\r\n");
      out.write("                            </section>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <section class=\"content-container\">\r\n");
      out.write("                                <div class=\"profile\">\r\n");
      out.write("                                    <div><img src=\"/static/images/reply_profile.png\" width=\"15px\"></div>\r\n");
      out.write("                                    <h6 class=\"writer\">홍길동</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <h4 class=\"title\">어노테이션 하나씩 구글링 해보셈</h4>\r\n");
      out.write("                                <section class=\"reply-update-wrap\">\r\n");
      out.write("                                    <textarea id=\"\" cols=\"30\" rows=\"1\" placeholder=\"내 댓글\"></textarea>\r\n");
      out.write("                                    <div class=\"button-wrap\">\r\n");
      out.write("                                        <button class=\"update-done\">작성완료</button>\r\n");
      out.write("                                        <button class=\"calcel\">취소</button>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                </section>\r\n");
      out.write("                                <h6 clss=\"board-info\">\r\n");
      out.write("                                    <span class=\"date\">2일 전</span>\r\n");
      out.write("                                    <span class=\"date\">·</span>\r\n");
      out.write("                                    <span class=\"update\">수정</span>\r\n");
      out.write("                                    <span class=\"date\">·</span>\r\n");
      out.write("                                    <span class=\"delete\">삭제</span>\r\n");
      out.write("                                </h6>\r\n");
      out.write("                            </section>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <section class=\"content-container\">\r\n");
      out.write("                                <div class=\"profile\">\r\n");
      out.write("                                    <div><img src=\"/static/images/reply_profile.png\" width=\"15px\"></div>\r\n");
      out.write("                                    <h6 class=\"writer\">홍길동</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <h4 class=\"title\">\r\n");
      out.write("                                    REST가 Representational State Transfer 축약어인데 페이지 요청보다는 데이터 요청에 가깝다고 생각하면 됨.\r\n");
      out.write("                                </h4>\r\n");
      out.write("                                <h6 clss=\"board-info\">\r\n");
      out.write("                                    <span class=\"date\">3일 전</span>\r\n");
      out.write("                                </h6>\r\n");
      out.write("                            </section>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li>\r\n");
      out.write("                        <div>\r\n");
      out.write("                            <section class=\"content-container\">\r\n");
      out.write("                                <div class=\"profile\">\r\n");
      out.write("                                    <div><img src=\"/static/images/reply_profile.png\" width=\"15px\"></div>\r\n");
      out.write("                                    <h6 class=\"writer\">홍길동</h6>\r\n");
      out.write("                                </div>\r\n");
      out.write("                                <h4 class=\"title\">REST 어렵긴 하지..</h4>\r\n");
      out.write("                                <h6 clss=\"board-info\">\r\n");
      out.write("                                    <span class=\"date\">6일 전</span>\r\n");
      out.write("                                </h6>\r\n");
      out.write("                            </section>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </li>\r\n");
      out.write("                </ul>\r\n");
      out.write("                <button type=\"button\" id=\"more-replies\">\r\n");
      out.write("                	<div>더보기</div>\r\n");
      out.write("                	<div><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/images/plus.png\" width=\"24\"></div>\r\n");
      out.write("                </button>\r\n");
      out.write("            </section>\r\n");
      out.write("        </section>\r\n");
      out.write("    </main>\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("<script src=\"https://rawgit.com/jackmoore/autosize/master/dist/autosize.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/js/board/board.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/static/js/board/reply.js\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /templates/board/detail.jsp(27,20) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memberId eq board.memberId}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("	                    <a href=\"javascript:location.href='");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/board/update.board'\" class=\"update\">수정</a>\r\n");
          out.write("	                    <a href=\"javascript:location.href='");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/board/deleteOk.board'\" class=\"delete\">삭제</a>\r\n");
          out.write("                    ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }
}
